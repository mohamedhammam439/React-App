{"version":3,"sources":["components/NAV/Nav.js","components/HOME/Home.js","components/CRUD/Listcrud.js","components/CRUD/Formcrud.js","components/CRUD/CRUD.js","components/TODOLIST/Dolist.js","components/TODOLIST/Addlist.js","components/TODOLIST/TODOLIST.js","components/WEATHER/Form.js","components/WEATHER/List.js","components/WEATHER/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Nav","className","href","to","Home","Listcrud","state","isEdit","toggleCourse","setState","renderCourse","props","details","name","onClick","DeleteCourse","index","updatecourse","e","preventDefault","editCourseItem","input","value","editeCourse","onSubmit","type","defaultValue","ref","v","this","Component","Formcrud","AddCourse","current","onChange","updateCourse","id","App","courses","target","namee","push","splice","courselist","length","map","course","key","Dolist","users","items","deletitem","theitem","item","Math","random","hours","Addlist","handelchange","handelsubmit","addlist","placeholder","TODOLIST","user","i","findIndex","k","Form","getweather","List","City","Country","Tempreature","pressure","humidity","description","error","API_KEY","Weather","a","city","elements","country","fetch","api","json","data","sys","main","temp","weather","path","component","CRUD","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"8WAyBeA,G,MArBJ,WACP,OACI,yBAAKC,UAAU,UACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,WACX,yBAAKA,UAAU,SACV,uBAAGC,KAAK,IAAID,UAAU,QAAtB,UAGT,yBAAKA,UAAU,WACX,4BACI,kBAAC,IAAD,CAASE,GAAG,QAAQF,UAAU,WAA9B,QACA,kBAAC,IAAD,CAASE,GAAG,QAAQF,UAAU,WAA9B,QACA,kBAAC,IAAD,CAASE,GAAG,YAAYF,UAAU,WAAlC,YACA,kBAAC,IAAD,CAASE,GAAG,WAAWF,UAAU,WAAjC,iBCLTG,G,MAXH,WACR,OACI,6BAASH,UAAU,QACf,yBAAKA,UAAU,iBACX,wBAAIA,UAAU,UAAd,4BACA,wBAAIA,UAAU,UAAd,mCCqDDI,E,2MAvDXC,MAAM,CACFC,QAAS,G,EAIbC,aAAa,WAAK,IACTD,EAAQ,EAAKD,MAAbC,OACL,EAAKE,SAAS,CACVF,QAAUA,K,EAMlBG,aAAa,WACT,OACI,wBAAIT,UAAU,UACV,0BAAMA,UAAU,YAAY,EAAKU,MAAMC,QAAQC,MAC/C,4BAASZ,UAAU,iBAAiBa,QAAU,WAAM,EAAKN,iBAAzD,QACA,4BAASP,UAAU,iBAAiBa,QAAU,WAAM,EAAKH,MAAMI,aAAa,EAAKJ,MAAMK,SAAvF,Y,EAMZC,aAAa,SAACC,GACVA,EAAEC,iBACF,EAAKR,MAAMS,eAAe,EAAKT,MAAMK,MAAO,EAAKK,MAAMC,OACvD,EAAKd,gB,EAOTe,YAAY,WACR,OACI,0BAAMC,SAAU,EAAKP,cACjB,2BAAOhB,UAAU,gBAAgBwB,KAAK,OAAOC,aAAc,EAAKf,MAAMC,QAAQC,KAAMc,IAAK,SAACC,GAAM,EAAKP,MAAQO,KAC7G,4BAAS3B,UAAU,cAAnB,Y,wEAOR,IAAIM,EAAOsB,KAAKvB,MAAMC,OACtB,OACI,kBAAC,WAAD,KACKA,EAASsB,KAAKN,cAAgBM,KAAKnB,oB,GAnD7BoB,aCSRC,EATE,SAACpB,GACd,OACI,0BAAMV,UAAU,eAAeuB,SAAUb,EAAMqB,WAC3C,2BAAO/B,UAAU,gBAAgBwB,KAAK,OAAOH,MAAOX,EAAMsB,QAASC,SAAUvB,EAAMwB,aAAcC,GAAG,UACpG,4BAAQnC,UAAU,cAAlB,gBCgFGoC,G,iNA/Eb/B,MAAM,CACJgC,QAAS,CACP,CAACzB,KAAK,WACN,CAACA,KAAK,UACN,CAACA,KAAK,WACLoB,QAAQ,I,EAKbE,aAAa,SAACjB,GACZ,EAAKT,SAAS,CACZwB,QAAQf,EAAEqB,OAAOjB,S,EAOrBU,UAAU,SAACd,GACTA,EAAEC,iBACF,IAAIc,EAAQ,EAAK3B,MAAM2B,QACnBK,EAAQ,EAAKhC,MAAMgC,QACvB,GAA6B,KAAzBpB,EAAEqB,OAAOC,MAAMlB,MACjB,OAAO,EAEPgB,EAAQG,KAAK,CAAC5B,KAAKoB,IACnB,EAAKxB,SAAS,CACZ6B,UACAL,QAAQ,M,EAQdlB,aAAa,SAACC,GACZ,IAAIsB,EAAQ,EAAKhC,MAAMgC,QACvBA,EAAQI,OAAO1B,EAAM,GACrB,EAAKP,SAAS,CACZ6B,a,EAMJlB,eAAe,SAACJ,EAAMM,GACpB,IAAIgB,EAAQ,EAAKhC,MAAMgC,QACZA,EAAQtB,GACb,KAAWM,EACjB,EAAKb,SAAS,CACZ6B,a,wEAKM,IAAD,OACAA,EAAST,KAAKvB,MAAdgC,QAEDK,EADOL,EAAQM,OACMN,EAAQO,KAAI,SAACC,EAAO9B,GAC7C,OAAO,kBAAC,EAAD,CAAUJ,QAASkC,EAAQC,IAAK/B,EAAOD,aAAc,EAAKA,aAAcC,MAAOA,EAAOI,eAAgB,EAAKA,oBAElH,uBAAGnB,UAAU,SAAb,+BAEF,OACE,6BAASA,UAAU,QACjB,yBAAKA,UAAU,iBACb,wBAAIA,UAAU,UAAd,8BACA,kBAAC,EAAD,CAAWkC,aAAcN,KAAKM,aAAcH,UAAWH,KAAKG,UAAWC,QAASJ,KAAKvB,MAAM2B,UAC3F,wBAAIhC,UAAU,UAAU0C,S,GAxEhBb,cC2BHkB,EA/BD,SAACrC,GACX,IAAMsC,EAAMtC,EAAMuC,MACXC,EAAWxC,EAAXwC,UAEDC,EADOH,EAAML,OACKK,EAAMJ,KAAI,SAAAQ,GAC9B,OACI,yBAAKN,IAAmB,GAAdO,KAAKC,SAAatD,UAAU,UAClC,0BAAMA,UAAU,OAAhB,IAAwBoD,EAAKjB,GAA7B,KACA,0BAAMnC,UAAU,QAAhB,IAAyBoD,EAAKxC,KAA9B,KACA,0BAAMZ,UAAU,SAAhB,IAA0BoD,EAAKG,MAA/B,KACA,0BAAMvD,UAAU,cAAca,QAAS,kBAAIqC,EAAUE,EAAKjB,MAA1D,cAIR,uBAAGnC,UAAU,aAAb,sBAEJ,OACI,yBAAKA,UAAU,QAEX,yBAAKA,UAAU,OACX,0BAAMA,UAAU,aAAhB,MACA,0BAAMA,UAAU,aAAhB,UACA,0BAAMA,UAAU,cAAhB,SACA,0BAAMA,UAAU,WAAhB,SAGHmD,I,QCeEK,E,2MAvCXnD,MAAM,CACF8B,GAAG,GACHvB,KAAK,GACL2C,MAAM,I,EAGVE,aAAe,SAACxC,GACZ,EAAKT,SAAL,eACKS,EAAEqB,OAAOH,GAAMlB,EAAEqB,OAAOjB,S,EAIjCqC,aAAe,SAACzC,GAEZ,GADAA,EAAEC,iBACwB,KAAtBD,EAAEqB,OAAOH,GAAGd,OAAsC,KAAtBJ,EAAEqB,OAAO1B,KAAKS,OAAqC,KAAvBJ,EAAEqB,OAAOiB,MAAMlC,MACvE,OAAO,EAEV,EAAKX,MAAMiD,QAAQ,EAAKtD,OACxB,EAAKG,SAAS,CACV2B,GAAG,GACHvB,KAAK,GACL2C,MAAM,M,wEAMX,OACI,yBAAKvD,UAAU,OACX,0BAAMuB,SAAUK,KAAK8B,cACjB,2BAAOlC,KAAK,SAASoC,YAAY,SAAS3B,SAAUL,KAAK6B,aAActB,GAAG,KAAKd,MAAOO,KAAKvB,MAAM8B,KACjG,2BAAOX,KAAK,OAAOoC,YAAY,gBAAgB3B,SAAUL,KAAK6B,aAActB,GAAG,OAAOd,MAAOO,KAAKvB,MAAMO,OACxG,2BAAOY,KAAK,SAASoC,YAAY,WAAW3B,SAAUL,KAAK6B,aAActB,GAAG,QAAOd,MAAOO,KAAKvB,MAAMkD,QACrG,2BAAO/B,KAAK,SAASH,MAAM,MAAMc,GAAG,c,GAnClCN,aC4CPgC,G,iNAtCbxD,MAAQ,CACN4C,MAAQ,CACN,CAACd,GAAG,EAAEvB,KAAK,YAAY2C,MAAM,KAC7B,CAACpB,GAAG,EAAEvB,KAAK,UAAU2C,MAAM,KAC3B,CAACpB,GAAG,EAAEvB,KAAK,UAAU2C,MAAM,O,EAI/BL,UAAY,SAACf,GACX,IAAI2B,EAAK,EAAKzD,MAAM4C,MAChBc,EAAID,EAAKE,WAAU,SAAAZ,GAAI,OAAIA,EAAKjB,KAAOA,KAC3C2B,EAAKrB,OAAOsB,EAAE,GAId,EAAKvD,SAAS,CAACyC,MAAMa,K,EAGvBH,QAAS,SAACM,GACR,IAAIH,EAAK,EAAKzD,MAAM4C,MACpBa,EAAKtB,KAAKyB,GACV,EAAKzD,SAAS,CAACyC,MAAMa,K,wEAIrB,OACE,6BAAS9D,UAAU,YACjB,yBAAKA,UAAU,iBACb,wBAAIA,UAAU,cAAd,gBACA,kBAAC,EAAD,CAAQiD,MAAOrB,KAAKvB,MAAM4C,MAAOC,UAAWtB,KAAKsB,YACjD,kBAAC,EAAD,CAASS,QAAS/B,KAAK+B,gB,GAhCV9B,c,yBCKRqC,EATH,SAACxD,GACT,OACI,0BAAMa,SAAUb,EAAMyD,WAAYnE,UAAU,YACxC,2BAAOA,UAAU,eAAewB,KAAK,OAAOoC,YAAY,OAAOhD,KAAK,SACpE,2BAAOZ,UAAU,eAAewB,KAAK,OAAOoC,YAAY,UAAUhD,KAAK,YACvE,4BAAQZ,UAAU,iBAAlB,iBCsBGoE,EA3BH,SAAC1D,GACT,OACI,6BAEIA,EAAM2D,MAAQ,uBAAGrE,UAAU,YAAb,UAAgCU,EAAM2D,MAGpD3D,EAAM4D,SAAW,uBAAItE,UAAU,YAAd,cAAqCU,EAAM4D,SAG5D5D,EAAM6D,aAAe,uBAAIvE,UAAU,YAAd,kBAAyCU,EAAM6D,aAGpE7D,EAAM8D,UAAY,uBAAIxE,UAAU,YAAd,aAAoCU,EAAM8D,UAG5D9D,EAAM+D,UAAY,uBAAIzE,UAAU,YAAd,cAAqCU,EAAM+D,UAG7D/D,EAAMgE,aAAe,uBAAI1E,UAAU,YAAd,iBAAwCU,EAAMgE,aAGnEhE,EAAMiE,OAAS,uBAAI3E,UAAU,YAAd,WAAkCU,EAAMiE,SCnB7DC,G,MAAQ,oCAmECC,E,2MAhEbxE,MAAM,CACJgE,KAAK,GACLC,QAAQ,GACRC,YAAY,GACZC,SAAS,GACTC,SAAS,GACTC,YAAY,GACZC,MAAM,I,EAGRR,W,uCAAW,WAAMlD,GAAN,qBAAA6D,EAAA,6DACT7D,EAAEC,iBACI6D,EAAK9D,EAAEqB,OAAO0C,SAASD,KAAK1D,MAC5B4D,EAAQhE,EAAEqB,OAAO0C,SAASC,QAAQ5D,MAH/B,SAIO6D,MAAM,oDAAD,OAAqDH,EAArD,YAA6DE,EAA7D,sBAAkFL,IAJ9F,cAIHO,EAJG,gBAKQA,EAAIC,OALZ,OAKHC,EALG,OAMNN,GAAQE,EAEX,EAAKzE,SAAS,CACZ6D,KAAKgB,EAAKzE,KACV0D,QAAQe,EAAKC,IAAIL,QACjBV,YAAYc,EAAKE,KAAKC,KACtBhB,SAASa,EAAKE,KAAKf,SACnBC,SAASY,EAAKE,KAAKd,SACnBC,YAAYW,EAAKI,QAAQ,GAAGf,YAC5BC,MAAM,KAGR,EAAKnE,SAAS,CACZ6D,KAAK,GACLC,QAAQ,GACRC,YAAY,GACZC,SAAS,GACTC,SAAS,GACTC,YAAY,GACZC,MAAM,uBAzBC,4C,8HA+BT,OACE,6BAAS3E,UAAU,WACf,yBAAKA,UAAU,oBACb,kBAAC,EAAD,CAAMmE,WAAYvC,KAAKuC,aACvB,kBAAC,EAAD,CACIE,KAAMzC,KAAKvB,MAAMgE,KACjBC,QAAS1C,KAAKvB,MAAMiE,QACpBC,YAAa3C,KAAKvB,MAAMkE,YACxBC,SAAU5C,KAAKvB,MAAMmE,SACrBC,SAAU7C,KAAKvB,MAAMoE,SACrBC,YAAa9C,KAAKvB,MAAMqE,YACxBC,MAAO/C,KAAKvB,MAAMsE,c,GArDZ9C,aCkBPO,E,iLAfX,OACE,kBAAC,IAAD,KACE,yBAAKpC,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAO0F,KAAK,QAAQC,UAAWxF,IAC/B,kBAAC,IAAD,CAAOuF,KAAK,QAAQC,UAAWC,IAC/B,kBAAC,IAAD,CAAOF,KAAK,YAAYC,UAAW9B,IACnC,kBAAC,IAAD,CAAO6B,KAAK,WAAWC,UAAWd,U,GAT3BhD,aCICgE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAjC,GACLkC,QAAQlC,MAAMA,EAAMmC,c","file":"static/js/main.874f084b.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link , NavLink} from 'react-router-dom';\r\nimport './NAV.css';\r\n\r\nconst Nav =()=>{\r\n    return(\r\n        <div className='navbar'>\r\n            <div className='container'>\r\n                <div className='navlogo'>\r\n                    <div className='rlogo'>\r\n                         <a href='#' className='logo'>LOGO</a>\r\n                    </div>\r\n                </div>\r\n                <div className='navlink'>\r\n                    <ul>\r\n                        <NavLink to=\"/HOME\" className='navlist'>HOME</NavLink>\r\n                        <NavLink to=\"/CRUD\" className='navlist'>CRUD</NavLink>\r\n                        <NavLink to=\"/TODOLIST\" className='navlist'>TODOLIST</NavLink>\r\n                        <NavLink to=\"/WEATHER\" className='navlist'>WEATHER</NavLink>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Nav;","import React from 'react';\r\nimport './HOME.css';\r\nconst Home =()=>{\r\n    return(\r\n        <section className='home'>\r\n            <div className='homecontainer'>\r\n                <h1 className='h1home'>MOHAMED AHMED ALI HAMMAM</h1>\r\n                <h2 className='h2home'>WELCOM TO MY 3 APPLICATIONS</h2>\r\n            </div>\r\n            \r\n        </section>\r\n    )\r\n}\r\nexport default Home;","import React, { Component,Fragment } from 'react';\r\n\r\n\r\nclass Listcrud extends Component{\r\n\r\n    state={\r\n        isEdit : false\r\n    }\r\n\r\n    // toggleCourse\r\n    toggleCourse=()=>{\r\n        let {isEdit}=this.state;\r\n        this.setState({\r\n            isEdit : !isEdit\r\n        })\r\n    }\r\n\r\n\r\n    // rendercourse\r\n    renderCourse=()=>{\r\n        return(\r\n            <li className='licrud'>\r\n                <span className='spancrud'>{this.props.details.name}</span>  \r\n                <button  className='buttoncrudedit' onClick={ ()=> {this.toggleCourse()}} >Edit</button>\r\n                <button  className='buttoncruddele' onClick={ ()=> {this.props.DeleteCourse(this.props.index)}}>Delete</button>\r\n            </li>\r\n        )\r\n    }\r\n\r\n    // updatecourse\r\n    updatecourse=(e)=>{\r\n        e.preventDefault();\r\n        this.props.editCourseItem(this.props.index ,this.input.value);\r\n        this.toggleCourse();\r\n\r\n    }\r\n\r\n\r\n\r\n    // editeCourse\r\n    editeCourse=()=>{\r\n        return(\r\n            <form onSubmit={this.updatecourse}>\r\n                <input className='forminputcrud' type='text' defaultValue={this.props.details.name} ref={(v)=> {this.input = v} } />\r\n                <button  className='buttoncrud'>Update</button>\r\n            </form>\r\n        )\r\n    }\r\n\r\n\r\n    render(){\r\n        let isEdit=this.state.isEdit;\r\n        return(\r\n            <Fragment>\r\n               { isEdit ? this.editeCourse() : this.renderCourse() }\r\n                \r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\nexport default Listcrud;","import React from 'react';\r\n\r\n\r\nconst Formcrud = (props) =>{\r\n    return(\r\n        <form className='formlistcrud' onSubmit={props.AddCourse}>\r\n            <input className='forminputcrud' type='text' value={props.current} onChange={props.updateCourse} id='namee' />\r\n            <button className='buttoncrud'>Add Course</button>\r\n            \r\n        </form>\r\n    )\r\n}\r\nexport default Formcrud;","import React, { Component } from 'react';\r\nimport Listcrud from './Listcrud';\r\nimport Formcrud from './Formcrud';\r\nimport './CRUD.css';\r\n\r\n\r\nclass App extends Component{\r\n\r\n  state={\r\n    courses: [\r\n      {name:'English'},\r\n      {name:'Arabic'},\r\n      {name:'French'},\r\n    ], current:''\r\n  }\r\n\r\n\r\n  // updateCourse\r\n  updateCourse=(e)=>{\r\n    this.setState({\r\n      current:e.target.value\r\n    })\r\n\r\n  }\r\n\r\n\r\n  // AddCourse\r\n  AddCourse=(e)=>{\r\n    e.preventDefault();\r\n    let current=this.state.current;\r\n    let courses=this.state.courses;            // namee because id of input id=namee because of CSS.\r\n    if (e.target.namee.value === '') {        // why must get id for this condition ?? (e.target = input )  (name = id of input in form)\r\n      return false                           // why we don't wright e.target.value onlyyyyyyyyyy ???!!\r\n    }else {                                 // what is the diffrent between - e.target.value & - e.target.name.value & - e.target.elements.name.value ??\r\n      courses.push({name:current})\r\n      this.setState({\r\n        courses ,\r\n        current:''\r\n      })\r\n    }\r\n  \r\n  }\r\n\r\n\r\n  // DeleteCourse\r\n  DeleteCourse=(index)=>{\r\n    let courses=this.state.courses;\r\n    courses.splice(index,1)\r\n    this.setState({\r\n      courses\r\n    })\r\n  }\r\n\r\n\r\n  // editCourseItem\r\n  editCourseItem=(index,value)=>{\r\n    let courses=this.state.courses;\r\n    let course=courses[index];\r\n    course['name'] = value;\r\n    this.setState({\r\n      courses\r\n    })\r\n  }\r\n\r\n\r\n  render() {\r\n    const {courses}=this.state;\r\n    const legnth=courses.length;\r\n    const courselist=legnth ? (courses.map((course,index)=>{\r\n      return <Listcrud details={course} key={index} DeleteCourse={this.DeleteCourse} index={index} editCourseItem={this.editCourseItem} />\r\n    })):(\r\n      <p className='pcrud'>There Is No Courses To Show</p>\r\n    )\r\n    return(\r\n      <section className='crud'>\r\n        <div className='crudcontainer'>\r\n          <h1 className='h1crud'>What Do You Want To Learn?</h1>\r\n          <Formcrud  updateCourse={this.updateCourse} AddCourse={this.AddCourse} current={this.state.current} />\r\n          <ul className='ulcrud'>{courselist}</ul>\r\n        </div>\r\n        \r\n      </section>\r\n    )\r\n  }\r\n \r\n}\r\n\r\nexport default App;\r\n","import React , {Component} from 'react';\r\n\r\nconst Dolist =(props)=> {\r\n    const users=props.items;\r\n    const {deletitem}=props;\r\n    const length=users.length\r\n    const theitem=length ? (users.map(item => {\r\n        return(\r\n            <div key={Math.random()*10} className='Dolist'>\r\n                <span className='num'> {item.id} </span>\r\n                <span className='name'> {item.name} </span>\r\n                <span className='hours'> {item.hours} </span>\r\n                <span className='action icon' onClick={()=>deletitem(item.id)}> &times; </span>\r\n            </div>\r\n        )\r\n    })) : (\r\n        <p className='ptodolist'>There is no action</p>\r\n    )\r\n    return(\r\n        <div className='todo'>\r\n\r\n            <div className='bar'>\r\n                <span className='num blue '>Id</span>\r\n                <span className='name blue'>Action</span>\r\n                <span className='hours blue'>Hours</span>\r\n                <span className='action '>Dele</span>\r\n            </div>\r\n           \r\n            {theitem}\r\n            \r\n        </div>\r\n    )\r\n}\r\nexport default Dolist;","import React , {Component} from 'react';\r\n\r\nclass Addlist extends Component {\r\n\r\n    state={\r\n        id:'',\r\n        name:'',\r\n        hours:''\r\n    }\r\n\r\n    handelchange = (e) => {\r\n        this.setState ({\r\n            [e.target.id] : e.target.value\r\n        })\r\n    }\r\n\r\n    handelsubmit = (e) => {\r\n        e.preventDefault();\r\n        if (e.target.id.value === '' || e.target.name.value==='' || e.target.hours.value===''){\r\n            return false\r\n        }else{\r\n         this.props.addlist(this.state)\r\n         this.setState({\r\n             id:'',\r\n             name:'',\r\n             hours:''\r\n         })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className='add'>\r\n                <form onSubmit={this.handelsubmit}>\r\n                    <input type='number' placeholder='num...' onChange={this.handelchange} id='id' value={this.state.id} />\r\n                    <input type='text' placeholder='Add Action...' onChange={this.handelchange} id='name' value={this.state.name}/>\r\n                    <input type='number' placeholder='Hours...' onChange={this.handelchange} id='hours'value={this.state.hours} />\r\n                    <input type='submit' value='Add' id='act' />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Addlist;","import React, { Component } from 'react';\r\nimport Dolist from './Dolist';\r\nimport Addlist from './Addlist';\r\nimport './TODOLIST.css';\r\n\r\n\r\nclass TODOLIST extends Component {\r\n\r\n  state = {\r\n    items : [\r\n      {id:1,name:'Breakfast',hours:'1'},\r\n      {id:2,name:'Resting',hours:'1'},\r\n      {id:3,name:'Studing',hours:'3'},\r\n    ]\r\n  }\r\n\r\n  deletitem = (id) => {\r\n    let user=this.state.items;\r\n    let i = user.findIndex(item => item.id === id );\r\n    user.splice(i,1);\r\n    // let user=this.state.items.filter(item=>{\r\n    //   return item.id !== id\r\n    // })\r\n    this.setState({items:user})\r\n  }\r\n\r\n  addlist =(k)=>{\r\n    let user=this.state.items\r\n    user.push(k)\r\n    this.setState({items:user})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <section className=\"TODOLIST\">\r\n        <div className='todocontainer'>\r\n          <h1 className='h1todolist'>ToDoList App</h1>\r\n          <Dolist items={this.state.items} deletitem={this.deletitem}/>\r\n          <Addlist addlist={this.addlist} />\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n \r\n}\r\n\r\nexport default TODOLIST;\r\n","import React from 'react';\r\n\r\nconst Form =(props) =>{\r\n    return(\r\n        <form onSubmit={props.getweather} className='formlist'>\r\n            <input className='inputweather' type='text' placeholder='city' name='city' />\r\n            <input className='inputweather' type='text' placeholder='country' name='country' />\r\n            <button className='buttonweather'>Get Weather</button>\r\n        </form>\r\n    )\r\n}\r\nexport default Form ;","import React from 'react';\r\n\r\nconst List =(props) =>{\r\n    return(\r\n        <div>\r\n        {\r\n            props.City && <p className='pweather'>City : {props.City}</p>\r\n        }\r\n        {\r\n            props.Country && <p  className='pweather'>Country :  {props.Country}</p>\r\n        }\r\n        {\r\n            props.Tempreature && <p  className='pweather'>Tempreature :  {props.Tempreature}</p>\r\n        }\r\n        {\r\n            props.pressure && <p  className='pweather'>Pressure  {props.pressure}</p>\r\n        }\r\n        {\r\n            props.humidity && <p  className='pweather'>Humidity : {props.humidity}</p>\r\n        }\r\n        {\r\n            props.description && <p  className='pweather'>Description : {props.description}</p>\r\n        }\r\n        {\r\n            props.error && <p  className='pweather'>Error : {props.error}</p>\r\n        }   \r\n        </div>\r\n    )\r\n}\r\nexport default List ;","import React, { Component } from 'react';\r\nimport Form from './Form';\r\nimport List from './List';\r\nimport './Weather.css';\r\n\r\nconst API_KEY='487862f576f796db554187c8715d2b90';\r\n\r\nclass Weather extends Component{\r\n  state={\r\n    City:'',\r\n    Country:'',\r\n    Tempreature:'',\r\n    pressure:'',\r\n    humidity:'',\r\n    description:'',\r\n    error:''\r\n  }\r\n  // componentDidMount(){}\r\n  getweather=async(e)=>{\r\n    e.preventDefault();\r\n    const city=e.target.elements.city.value;\r\n    const country=e.target.elements.country.value;\r\n    const api=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&Weatherid=${API_KEY}`);\r\n    const data=await api.json();\r\n   if (city && country) {\r\n    //  console.log(this.state)\r\n    this.setState({\r\n      City:data.name,\r\n      Country:data.sys.country,\r\n      Tempreature:data.main.temp,\r\n      pressure:data.main.pressure,\r\n      humidity:data.main.humidity,\r\n      description:data.weather[0].description,\r\n      error:''\r\n    })\r\n   }else {\r\n    this.setState({\r\n      City:'',\r\n      Country:'',\r\n      Tempreature:'',\r\n      pressure:'',\r\n      humidity:'',\r\n      description:'',\r\n      error:'Please Insert Data'\r\n    })\r\n   }\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <section className=\"Weather\">\r\n          <div className='weathercontainer'>\r\n            <Form getweather={this.getweather} />\r\n            <List \r\n                City={this.state.City}\r\n                Country={this.state.Country}\r\n                Tempreature={this.state.Tempreature}\r\n                pressure={this.state.pressure}\r\n                humidity={this.state.humidity}\r\n                description={this.state.description}\r\n                error={this.state.error}\r\n            />\r\n\r\n          </div>\r\n       \r\n       \r\n      </section>\r\n    );\r\n  }\r\n \r\n}\r\n\r\nexport default Weather;\r\n","import React, { Component } from 'react';\nimport {BrowserRouter , Route} from 'react-router-dom';\nimport Nav from './components/NAV/Nav';\nimport Home from './components/HOME/Home';\nimport CRUD from './components/CRUD/CRUD';\nimport TODOLIST from './components/TODOLIST/TODOLIST';\nimport Weather from './components/WEATHER/Weather';\n\nclass  App extends Component {\n  render(){\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n            <Nav />\n            <Route path=\"/HOME\" component={Home} />\n            <Route path=\"/CRUD\" component={CRUD} />\n            <Route path=\"/TODOLIST\" component={TODOLIST} />\n            <Route path=\"/Weather\" component={Weather} />\n        </div>\n      </BrowserRouter>\n    );\n  }\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}